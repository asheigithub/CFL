#include "stdafx.h"
#include <vector>
#include <list>
#include <string>

#include <algorithm>  
#include <functional>
#include <iostream>
#include <stack>

#include "huffman.h"


namespace cfl
{
	namespace content
	{
		struct HuffmanNode
		{
			//频率
			unsigned	int weight=0;
			//字节内容
			unsigned	char bytevalue=0;

			//父节点
			HuffmanNode* parent=nullptr;

			//左子节点
			HuffmanNode* left=nullptr;
			//右子节点
			HuffmanNode* right=nullptr;

			//如果是子节点则标识左或者右  0为左，1为右
			int          leftorright=0;
			
			//是否叶子节点
			bool isleaf = false;


			std::string huffmancode;

		};


		bool selectNode(std::list<HuffmanNode*>* priority , HuffmanNode*& one,HuffmanNode*& two )
		{
			auto n1 = priority->begin();
			if (n1 != priority->end() && *n1 )
			{
				one = *n1;

				priority->erase(n1);
			}
			else
			{
				return false;
			}
			auto n2 = priority->begin();
			if (n2 != priority->end() && *n2)
			{
				two = *n2;

				priority->erase(n2);
			}
			else
			{
				return false;
			}

			return true;

		}

		HuffmanNode* makeHuffmanTree(std::list<HuffmanNode*>* priority  )
		{
			HuffmanNode* root = nullptr;

			HuffmanNode* n1 = nullptr;
			HuffmanNode* n2 = nullptr;
			while (selectNode(priority, n1, n2))
			{
				root = new HuffmanNode();

				
				n1->parent = root;
				n2->parent = root;

				n1->leftorright = 0;
				n2->leftorright = 1;

				root->left = n1;
				root->right = n2;
				
				root->weight = n1->weight + n2->weight;

				//将这个节点放回priority
				auto pos = priority->begin();
				for (; pos != priority->end() && *pos ; pos++)
				{
					if ((*pos)->weight > root->weight)
					{
						break;
					}
				}

				priority->insert(pos, root);

			}
			if (root)
			{
				return root;
			}
			else if (n1) //只有1个节点的情况
			{
				root = new HuffmanNode();
				
				root->left = n1;
				n1->parent = root;

				n1->leftorright = 0;

				return root;
			}
			else        //权重表是空的
			{
				return nullptr;
			}
			
		}

		void deleteNodes(HuffmanNode* root)
		{
			//清理内存
			if (root)
			{
				std::list<HuffmanNode*> todelete;

				std::stack<HuffmanNode*> s;
				HuffmanNode *p = root;
				while (p != nullptr || !s.empty())
				{
					while (p != NULL)
					{
						todelete.push_back(p);
						s.push(p);
						p = p->left;

						
					}
					if (!s.empty())
					{
						p = s.top();
						s.pop();
						p = p->right;
					}
				}

				for (auto i = todelete.begin(); i != todelete.end(); i++)
				{
					delete *i;
				}

			}


		}

		HuffmanFile huffmanCompress(const char* bytes, size_t len)
		{
			const unsigned char* input = reinterpret_cast<const unsigned char*>(bytes);

			std::vector<HuffmanNode*> prioritylist;
			prioritylist.resize(256, nullptr);
			size_t maxwidth = 0;
			//频率表
			for (size_t i = 0; i < len; i++)
			{
				auto v = input[i];
				auto nodeptr = prioritylist[v];
				if (!nodeptr)
				{
					nodeptr = new HuffmanNode();
					prioritylist[v] = nodeptr;
				}

				nodeptr->bytevalue = v;
				++nodeptr->weight;

				if (nodeptr->weight > maxwidth)
				{
					maxwidth = nodeptr->weight;
				}

			}

			std::sort(prioritylist.begin(), prioritylist.end(),
				[](HuffmanNode* node1, HuffmanNode* node2)->bool{
				if (node1 == nullptr && node2 == nullptr)
				{
					return false;
				}

				if (node1 == nullptr)
				{
					return false;
				}
				else if (node2 == nullptr)
				{
					return true;
				}
				else
				{
					return (node1->weight) <(node2->weight);
				}
			});
			//将频率范围压缩到0-255;
			for (size_t i = 0; i < 256 && prioritylist[i] != nullptr; i++)
			{
				prioritylist[i]->weight = prioritylist[i]->weight * 255 / maxwidth;
				if (prioritylist[i]->weight == 0)
				{
					prioritylist[i]->weight = 1;
				}
			}





			std::list<HuffmanNode*> temppriority;

			for (size_t i = 0; i < 256 && prioritylist[i] != nullptr; i++)
			{
				temppriority.push_back(prioritylist[i]);

				std::cout << "'" << prioritylist[i]->bytevalue << "' : " << prioritylist[i]->weight << std::endl;
			}

			HuffmanNode* root = nullptr;


			root = makeHuffmanTree(&temppriority);
			//可能没有节点（说明为0字节）

			if (root)
			{
				for (size_t i = 0; i < 256 && prioritylist[i] != nullptr; i++)
				{
					auto n = prioritylist[i];
					//创建哈夫曼编码  从底部遍历到顶

					std::string hcode = "";
					if (n->leftorright == 0)
					{
						hcode = "0";
					}
					else
					{
						hcode = "1";
					}

					auto p = n->parent;
					while (p != nullptr && p->parent)
					{
						if (p->leftorright == 0)
						{
							hcode = "0" + hcode;
						}
						else
						{
							hcode = "1" + hcode;
						}
						p = p->parent;
					}

					n->huffmancode = hcode;
					std::cout << "'" << n->bytevalue << "' huffmancode: " << hcode << std::endl;
				}

			}



			//压缩//

			HuffmanHeader header;

			unsigned char tempbuff = 0;
			size_t fulled = 0;



			std::string* table[256];
			memset(table, 0, 256);
			for (size_t i = 0; i < 256 && prioritylist[i] != nullptr; i++)
			{
				header.priorityCount = i + 1;
				table[prioritylist[i]->bytevalue] = &(prioritylist[i]->huffmancode);
			}

			unsigned char* output = new unsigned char[sizeof(header) + sizeof(unsigned char) * 2 * header.priorityCount + len];
			size_t outlens = sizeof(header) + sizeof(unsigned char) * 2 * header.priorityCount;

			unsigned char* pos = output + sizeof(header);
			//写入频率表
			for (size_t i = 0; i < header.priorityCount; i++)
			{

				memcpy(pos, &prioritylist[i]->bytevalue, 1);
				pos++;

				unsigned char w = static_cast<unsigned char>(prioritylist[i]->weight);

				memcpy(pos, &w, 1);
				pos++;
			}



			for (size_t i = 0; i < len; i++)
			{
				auto data = input[i];

				std::string* huffcodeptr = table[data];

				const char* code = huffcodeptr->c_str();
				for (size_t i = 0; i < huffcodeptr->length(); i++)
				{
					auto bit = code[i];
					if (bit == '1')
					{
						tempbuff = tempbuff | 1;
					}

					++fulled;
					if (fulled == 8)
					{
						//装入压缩后的数组
						output[outlens] = tempbuff;
						outlens++;

						fulled = 0;
						tempbuff = 0;
					}
					else
					{
						tempbuff = tempbuff << 1;
					}
				}
			}

			if (fulled > 0)//最后一个字节,左移动补足
			{
				tempbuff = tempbuff << (7 - fulled);
				output[outlens] = tempbuff;
				outlens++;

				fulled = 0;				//压缩完成
				tempbuff = 0;
			}
			header.compressedlen = outlens - sizeof(header) - sizeof(unsigned char) * 2 * header.priorityCount;
			header.uncompresslen = len;
			memcpy(output, &header, sizeof(header));

			deleteNodes(root);


			HuffmanFile file;
			file.header = header;

			file.data = std::shared_ptr<char>( reinterpret_cast<char*>( output) ,
			[](char* d )
			{
				delete[] d;
			}
				);

			return file;
		}

		UnHuffmanData unHuffmanCompress(const char* bytes, size_t len)
		{
			if (len < sizeof(HuffmanHeader))
			{
				return UnHuffmanData();
			}

			HuffmanHeader header;
			memcpy(&header, bytes, sizeof(HuffmanHeader));


			const unsigned char* pos = reinterpret_cast<const unsigned char*>( bytes) + sizeof(HuffmanHeader);
			//重建huffman树
			std::list<HuffmanNode*> prioritylist;
			for (size_t i = 0; i < header.priorityCount; i++)
			{
				unsigned char datavalue;
				memcpy(&datavalue, pos, 1);
				pos++;
				unsigned char weight;
				memcpy(&weight, pos, 1);
				pos++;

				auto nodeptr = new HuffmanNode();
				nodeptr->bytevalue = datavalue;
				nodeptr->weight = weight;
				nodeptr->isleaf = true;

				prioritylist.push_back(nodeptr);

			}

			auto root = makeHuffmanTree(&prioritylist);


			unsigned char* decompressed = new unsigned char[header.uncompresslen + 1];
			decompressed[header.uncompresslen] = '\0';
			size_t decompressPos = 0;
			auto bit = 0;
			HuffmanNode* treeNode = root;

			

			for (size_t i = 0; i < header.compressedlen ; i++)
			{
				auto cdata = *pos;
				pos++;

				for (size_t j = 0; j < 8; j++)
				{
					bit = (cdata >> (7 - j)) & 1;

					if (bit == 0)
					{
						treeNode = treeNode->left;
					}
					else
					{
						treeNode = treeNode->right;
					}
					if ( treeNode->isleaf )//treeNode->left == nullptr && treeNode->right == nullptr)
					{

						decompressed[decompressPos] = treeNode->bytevalue;
						decompressPos++;

						if (decompressPos == header.uncompresslen)
						{
							break;
						}

						treeNode = root;
					}
				}

			}

			if (root)
			{
				deleteNodes(root);
			}


			UnHuffmanData ret;
			ret.dataSize = header.uncompresslen;
			ret.data = std::shared_ptr<char>( reinterpret_cast<char*>( decompressed),
				[](char * d)
			{
				delete[] d;
			}
				);

			return ret;
		}



	}
}